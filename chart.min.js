class SimpleChart {
    constructor(ctx, config) {
        this.ctx = ctx;
        this.config = config;
        this.width = ctx.canvas.width;
        this.height = ctx.canvas.height;
        this.draw();
    }

    destroy() {
        if (this.ctx) {
            this.ctx.clearRect(0, 0, this.width, this.height);
        }
    }

    draw() {
        if (!this.ctx || !this.config || !this.config.data) return;
        
        this.ctx.clearRect(0, 0, this.width, this.height);
        
        if (this.config.type === 'doughnut') {
            this.drawDoughnut();
        } else {
            this.drawBar();
        }
    }

    drawBar() {
        const data = this.config.data;
        const padding = 40;
        const barSpacing = 10;
        const availableWidth = this.width - (2 * padding);
        const availableHeight = this.height - (2 * padding);
        
        const values = data.datasets[0].data.map(Number);
        const maxValue = Math.max(...values, 0.1); // Avoid division by zero
        const barWidth = (availableWidth / values.length) - barSpacing;

        // Draw axes
        this.ctx.beginPath();
        this.ctx.strokeStyle = '#666';
        this.ctx.moveTo(padding, padding);
        this.ctx.lineTo(padding, this.height - padding);
        this.ctx.lineTo(this.width - padding, this.height - padding);
        this.ctx.stroke();

        // Draw bars and labels
        values.forEach((value, i) => {
            const x = padding + (i * (barWidth + barSpacing));
            const barHeight = (value / maxValue) * availableHeight;
            const y = this.height - padding - barHeight;

            // Draw bar
            this.ctx.fillStyle = data.datasets[0].backgroundColor || '#36A2EB';
            this.ctx.fillRect(x, y, barWidth, barHeight);

            // Draw value
            this.ctx.fillStyle = '#000';
            this.ctx.font = '10px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText(value, x + barWidth/2, y - 5);

            // Draw label
            this.ctx.save();
            this.ctx.translate(x + barWidth/2, this.height - padding + 5);
            this.ctx.rotate(-Math.PI/4);
            this.ctx.fillText(data.labels[i], 0, 0);
            this.ctx.restore();
        });
    }

    drawDoughnut() {
        const data = this.config.data;
        const values = data.datasets[0].data.map(Number);
        const total = values.reduce((a, b) => a + b, 0) || 1; // Avoid division by zero
        const centerX = this.width / 2;
        const centerY = this.height / 2;
        const radius = Math.min(this.width, this.height) / 3;
        const innerRadius = radius * 0.6;

        let startAngle = 0;
        values.forEach((value, i) => {
            const sliceAngle = (2 * Math.PI * value) / total;
            const endAngle = startAngle + sliceAngle;
            
            // Draw slice
            this.ctx.beginPath();
            this.ctx.moveTo(centerX, centerY);
            this.ctx.arc(centerX, centerY, radius, startAngle, endAngle);
            this.ctx.arc(centerX, centerY, innerRadius, endAngle, startAngle, true);
            this.ctx.closePath();
            
            this.ctx.fillStyle = Array.isArray(data.datasets[0].backgroundColor) 
                ? data.datasets[0].backgroundColor[i] 
                : '#36A2EB';
            this.ctx.fill();

            // Draw label
            const midAngle = startAngle + sliceAngle / 2;
            const labelRadius = radius + 20;
            const labelX = centerX + Math.cos(midAngle) * labelRadius;
            const labelY = centerY + Math.sin(midAngle) * labelRadius;
            
            this.ctx.fillStyle = '#000';
            this.ctx.font = '10px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText(`${data.labels[i]}: ${value}`, labelX, labelY);

            startAngle = endAngle;
        });
    }
}

// Make it globally available
window.Chart = SimpleChart; 